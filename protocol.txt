https://docs.nats.io/reference/reference-protocols/nats-protocol
https://beta-docs.nats.io/ref/protocols/jetstream ???

Only PUB, MSG, HPUB, and HMSG include payloads.

Field Delimiters: 
    The fields of NATS protocol messages are delimited by 
    whitespace characters (space) or (tab). 
    Multiple whitespace characters will be treated as a single
    field delimiter.

Newlines: 
    NATS uses ␍ followed by ␊ (␍␊, 0x0D0A) to terminate protocol
    messages. This newline sequence is also used to mark the end 
    of the message payload in PUB, MSG, HPUB, and HMSG protocol messages.

Subject names: 
    Subject names, including reply subject names, are case-sensitive and 
    must be non-empty alphanumeric strings with no embedded whitespace. 
    All UTF-8 characters except spaces/tabs and separators which are . and > are allowed.
    Subject names can be optionally token-delimited using the dot character (.), e.g.:

    FOO, BAR, foo.bar, foo.BAR, FOO.BAR and FOO.BAR.BAZ are all valid subject names
    FOO. BAR, foo. .bar andfoo..bar are not valid subject names    

Subscription identifier (sid):
    A unique alphanumeric subscription ID, generated by the client

NATS Message Headers
    https://github.com/nats-io/nats-architecture-and-design/blob/main/adr/ADR-4.md

Without payloads    
    INFO        Server  Sent to client after initial TCP/IP connection

                        INFO {"option_name":option_value,...}␍␊
                        
                        INFO {"server_id":"NAURQFRTEZMTT6LIZKVUP7RBHEPD36NAYYTM6DBTLN5UJ4HZOHLI5IUZ","server_name":"NAURQFRTEZMTT6LIZKVUP7RBHEPD36NAYYTM6DBTLN5UJ4HZOHLI5IUZ","version":"2.10.24","proto":1,"git_commit":"1d6f7ea","go":"go1.23.4","host":"0.0.0.0","port":4222,"headers":true,"max_payload":1048576,"jetstream":true,"client_id":6,"client_ip":"172.18.0.1","xkey":"XBQCKF4GTDYB2RKF5EO4XEAW2NLCDYOCHPLAEFGTLTOOPYXM4TWRKU5E"} 
                        
                        INFO 
                            {
                                "server_id":"NBKGIX5B7HTLWXJLNR7QHFPXFCY3S33WJF7QIZLGB75KW2HNQFBNKE2F",
                                "server_name":"NBKGIX5B7HTLWXJLNR7QHFPXFCY3S33WJF7QIZLGB75KW2HNQFBNKE2F",
                                "version":"2.10.24",
                                "proto":1,
                                "git_commit":"1d6f7ea",
                                "go":"go1.23.4",
                                "host":"0.0.0.0",
                                "port":4222,
                                "headers":true,
                                "max_payload":1048576,
                                "jetstream":true,
                                "client_id":5,
                                "client_ip":"172.18.0.1",
                                "xkey":"XBPECVCORYF4FBGNQYMCDY6MDAARYABTXXCULAWNOMPRUNYWXFWUZKLQ"
                            }
                            ␍␊
                
    CONNECT     Client  Sent to server to specify connection information

                        CONNECT {"option_name":option_value,...}␍␊
        
                        CONNECT 
                            {
                                "verbose":false,
                                "pedantic":false,
                                "tls_required":false,
                                "name":"",
                                "lang":"go",
                                "version":"1.2.2",
                                "protocol":1
                            }
                            ␍␊
    
    SUB         Client  Subscribe to a subject (or subject wildcard)

                        SUB <subject> [queue group] <sid>␍␊
                        
                        SUB FOO 1␍␊
                        
                        SUB BAR G1 44␍␊
                
    UNSUB       Client  Unsubscribe (or auto-unsubscribe) from subject

                        UNSUB <sid> [max_msgs]␍␊
                        
                        UNSUB 1␍␊
                        
                        UNSUB 1 5␍␊
                
    PING        Both    PING keep-alive message

                        PING␍␊
                        
    PONG        Both    PONG keep-alive response

                        PONG␍␊
                        
    +OK         Server  Acknowledges well-formed protocol message in verbose mode

                        +OK␍␊
    
    -ERR        Server  Indicates a protocol error. May cause client disconnect.

                        -ERR <error message>␍␊
                
With payloads    
    PUB         Client  Publish a message to a subject, with optional reply subject

                        PUB <subject> [reply-to] <#bytes>␍␊[payload]␍␊
                        
                        PUB FOO 11␍␊Hello NATS!␍␊
                        
                        PUB FRONT.DOOR JOKE.22 11␍␊Knock Knock␍␊
                        
                        PUB NOTIFY 0␍␊␍␊
                
    HPUB        Client  Publish a message to a subject including NATS headers, with optional reply subject

                        HPUB <subject> [reply-to] <#header bytes> <#total bytes>␍␊[headers]␍␊␍␊[payload]␍␊
                        
                        HPUB FOO 22 33␍␊NATS/1.0␍␊Bar: Baz␍␊␍␊Hello NATS!␍␊
                        
                        HPUB FRONT.DOOR JOKE.22 45 56␍␊NATS/1.0␍␊BREAKFAST: donut␍␊LUNCH: burger␍␊␍␊Knock Knock␍␊
                        
                        HPUB MORNING.MENU 47 51␍␊NATS/1.0␍␊BREAKFAST: donut␍␊BREAKFAST: eggs␍␊␍␊Yum!␍␊                    

    MSG         Server  Delivers a message payload to a subscriber

                        MSG <subject> <sid> [reply-to] <#bytes>␍␊
                        [payload]␍␊
                        
                        MSG FOO.BAR 9 11␍␊
                        Hello World␍␊
                        
                        MSG FOO.BAR 9 GREETING.34 11␍␊
                        Hello World␍␊
    
    HMSG        Server  Delivers a message payload to a subscriber with NATS headers

                        HMSG <subject> <sid> [reply-to] <#header bytes> <#total bytes>␍␊
                        [headers]␍␊␍␊
                        [payload]␍␊
        
                        HMSG FOO.BAR 34 45␍␊
                        NATS/1.0␍␊
                        FoodGroup: vegetable␍␊␍␊
                        Hello World␍␊
                        
                        HMSG FOO.BAR 9 BAZ.69 34 45␍␊
                        NATS/1.0␍␊
                        FoodGroup: vegetable␍␊␍␊
                        Hello World␍␊

Connecting
    https://docs.nats.io/using-nats/developer/connecting

    Ping/Pong Protocol
        https://docs.nats.io/using-nats/developer/connecting/pingpong

    Turning Off Echo'd Messages
        https://docs.nats.io/using-nats/developer/connecting/noecho

Request-Reply
    https://docs.nats.io/nats-concepts/core-nats/reqreply

Reply for "$JS.API.INFO" request
{
  "type" : "io.nats.jetstream.api.v1.account_info_response",
  "memory" : 0,
  "storage" : 0,
  "reserved_memory" : 0,
  "reserved_storage" : 0,
  "streams" : 0,
  "consumers" : 0,
  "limits" : {
    "max_memory" : -1,
    "max_storage" : -1,
    "max_streams" : -1,
    "max_consumers" : -1,
    "max_ack_pending" : -1,
    "memory_max_stream_bytes" : -1,
    "storage_max_stream_bytes" : -1,
    "max_bytes_required" : false
  },
  "api" : {
    "total" : 0,
    "errors" : 0
  }
}                                                        

Reply for ""$JS.API.STREAM.DELETE.NONEXISTINGSTREAM" request
{"type":"io.nats.jetstream.api.v1.stream_delete_response","error":{"code":404,"err_code":10059,"description":"stream not found"}}

{
    "type":"io.nats.jetstream.api.v1.stream_delete_response",
    "error": {
        "code":404,
        "err_code":10059, ??? optional
        "description":"stream not found"
    }
}
{"type":"io.nats.jetstream.api.v1.stream_create_response","error":{"code":400,"err_code":10056,"description":"stream name in subject does not match request"}}
{"type":"io.nats.jetstream.api.v1.stream_create_response","config":{"name":"EXISTINGSTREAM","subjects":["EXISTINGSTREAM"],"retention":"limits","max_consumers":-1,"max_msgs":-1,"max_bytes":-1,"max_age":0,"max_msgs_per_subject":-1,"max_msg_size":-1,"discard":"old","storage":"file","num_replicas":1,"duplicate_window":120000000000,"compression":"none","allow_direct":false,"mirror_direct":false,"sealed":false,"deny_delete":false,"deny_purge":false,"allow_rollup_hdrs":false,"consumer_limits":{}},"created":"2025-02-02T08:40:19.933368586Z","state":{"messages":0,"bytes":0,"first_seq":0,"first_ts":"0001-01-01T00:00:00Z","last_seq":0,"last_ts":"0001-01-01T00:00:00Z","consumer_count":0},"ts":"2025-02-02T08:40:19.936023057Z","did_create":true}


Good response:
{
  "type": "io.nats.jetstream.api.v1.stream_names_response",
  "total": 1,
  "offset": 0,
  "limit": 1024,
  "streams": [
    "KV_NATS"
  ]
}

Error response:
{
  "type": "io.nats.jetstream.api.v1.consumer_info_response",
  "error": {
    "code": 404,
    "err_code": 10059,
    "description": "stream not found"
  }
}

Example of APIs
    $JS.API.STREAM.CREATE.%s
    $JS.API.STREAM.UPDATE.%s
    $JS.API.STREAM.NAMES
    $JS.API.STREAM.LIST
    $JS.API.STREAM.INFO.%s
    $JS.API.STREAM.DELETE.%s
    $JS.API.STREAM.PURGE.%s
    $JS.API.STREAM.MSG.DELETE.%s
    $JS.API.STREAM.MSG.GET.%s
    $JS.API.STREAM.SNAPSHOT.%s
    $JS.API.STREAM.RESTORE.%s
    $JS.API.STREAM.PEER.REMOVE.%s
    $JS.API.STREAM.LEADER.STEPDOWN.%s


JetStream Configuration
    https://docs.nats.io/nats-concepts/jetstream/streams

    {"name":"EXISTINGSTREAM","retention":"limits","max_consumers":-1,"max_msgs":-1,"max_bytes":-1,"max_age":0,"max_msgs_per_subject":-1,"max_msg_size":-1,"discard":"old","storage":"file","num_replicas":1,"duplicate_window":120000000000,"compression":"none","allow_direct":false,"mirror_direct":false,"sealed":false,"deny_delete":false,"deny_purge":false,"allow_rollup_hdrs":false}
    

    
NATS design
    https://gitee.com/nats-io/nats-architecture-and-design/blob/main/adr/ADR-1.md
    

INFO
====
// ServerInfoV1 identifies remote servers.
type ServerInfoV1 struct {
	Name      string    `json:"name"`
	Host      string    `json:"host"`
	ID        string    `json:"id"`
	Cluster   string    `json:"cluster,omitempty"`
	Version   string    `json:"ver"`
	Seq       uint64    `json:"seq"`
	JetStream bool      `json:"jetstream"`
	Time      time.Time `json:"time"`
}

CONNECT
=======
// ClientInfoV1 is detailed information about the client forming a connection.
type ClientInfoV1 struct {
	Start      time.Time     `json:"start,omitempty"`
	Host       string        `json:"host,omitempty"`
	ID         uint64        `json:"id,omitempty"`
	Account    string        `json:"acc"`
	User       string        `json:"user,omitempty"`
	Name       string        `json:"name,omitempty"`
	Lang       string        `json:"lang,omitempty"`
	Version    string        `json:"ver,omitempty"`
	RTT        time.Duration `json:"rtt,omitempty"`
	Server     string        `json:"server,omitempty"`
	Cluster    string        `json:"cluster,omitempty"`
	Alternates []string      `json:"alts,omitempty"`
	Stop       time.Time     `json:"stop,omitempty"`
	Jwt        string        `json:"jwt,omitempty"`
	IssuerKey  string        `json:"issuer_key,omitempty"`
	NameTag    string        `json:"name_tag,omitempty"`
	Tags       []string      `json:"tags,omitempty"`
	Kind       string        `json:"kind,omitempty"`
	ClientType string        `json:"client_type,omitempty"`
}

https://docs.nats.io/nats-concepts/jetstream/streams
https://docs.nats.io/~gitbook/image?url=https%3A%2F%2F1487470910-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-LqMYcZML1bsXrN3Ezg0%252Fuploads%252Fgit-blob-dedcc17f082fa1e39497c54ed8191b6424ee7792%252Fstreams-and-consumers-75p.png%3Falt%3Dmedia&width=768&dpr=4&quality=100&sign=697e5d00&sv=2

Wildcards: 
    NATS supports the use of wildcards in subject subscriptions.

    The asterisk character (*) matches a single token at any level of the subject.

    The greater than symbol (>), also known as the full wildcard, matches one or more 
    tokens at the tail of a subject, and must be the last token. 
    The wildcarded subject foo.> will match foo.bar or foo.bar.baz.1, but not foo.

    Wildcards must be a separate token (foo.*.baz or foo.> are syntactically valid; 
    foo*.bar, f*o.b*r and foo> are not)

    For example, the wildcard subscriptions foo.*.quux and foo.> both match foo.bar.quux, 
    but only the latter matches foo.bar.baz. 
    
    With the full wildcard, it is also possible to express interest in every subject that 
    may exist in NATS: sub > 1, limited of course by authorization settings.
